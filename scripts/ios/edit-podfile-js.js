const fs = require('fs');
const path = require('path');

module.exports = function (context) {
    return new Promise((resolve, reject) => {
        const projectRoot = context.opts.projectRoot;
        const podfileJsPath = path.join(projectRoot, 'node_modules', 'cordova-ios', 'lib', 'Podfile.js');

        // Check if Podfile.js exists
        if (!fs.existsSync(podfileJsPath)) {
            console.error(`ðŸš¨ Podfile.js not found at ${podfileJsPath}`);
            return reject(new Error(`Podfile.js not found at ${podfileJsPath}`));
        }

        try {
            // Read the existing Podfile.js file
            let podfileJsContent = fs.readFileSync(podfileJsPath, 'utf8');

            // Modify the getTemplate function to add the new target block
            const targetBlockAddition = `
            "\ttarget 'MobileMessagingNotificationExtension' do\\n" +
            '\t\tinherit! :search_paths\\n' +
            '\tend'
            `;

            const newGetTemplate = `Podfile.prototype.getTemplate = function () {
    // Escaping possible ' in the project name
    const projectName = this.escapeSingleQuotes(this.projectName);
    return util.format(
        '# DO NOT MODIFY -- auto-generated by Apache Cordova\\n' +
            '%s\\n' +
            'platform :ios, \\'14.0\\'\\n' + // Force iOS version to 14.0
            '%s\\n' +
            'target \\'%s\\' do\\n' +
            '\\tproject \\'%s.xcodeproj\\'\\n' +
            '%s\\n' +
            ${targetBlockAddition} +
            'end\\n',
        this.sourceToken, this.declarationToken, projectName, projectName, this.podToken);
};`;

            // Replace the existing Podfile.prototype.getTemplate function
            podfileJsContent = podfileJsContent.replace(
                /Podfile\.prototype\.getTemplate = function \(\) \{[^]*?\};/,
                newGetTemplate
            );

            // Write the modified content back to Podfile.js
            fs.writeFileSync(podfileJsPath, podfileJsContent, 'utf8');
            console.log('âœ… Podfile.js updated successfully!');

            resolve();
        } catch (error) {
            console.error(`ðŸš¨ Error updating Podfile.js: ${error.message}`);
            reject(new Error(`Error updating Podfile.js: ${error.message}`));
        }
    });
};